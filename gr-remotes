#!/bin/sh
#git recursive directories scripts - http://safrm.net/projects/gr-scripts
#author: Miroslav Safr <miroslav.safr@gmail.com>
#
VERSION=NA
VERSION_DATE=NA
#support color escape characters on different terminals
alias echo="/bin/echo -e"

BASENAME=`basename $0`
START_TIME=`date +'%s'`
usage() {
    echo "$BASENAME ${VERSION}"
    echo "Usage:$BASENAME [OPTIONS]... [PROJECT_DIR]"
    echo "Shows remotes in subdirectories ./ or PROJECT_DIR/"
    echo " options: "
    echo " -h, --help .......................... shows command line help"
    echo " -ls, --line-separator ............... project separated by colored line"
    echo " -ns, --no-summary ................... do not print execution summary"
    echo " -V, --version  ...................... prints version of scripts"
    echo " "
}

while [ $# -gt 0 ]; do
  case "$1" in
    -h | --help) 
        usage
        exit 
        ;;
    -ls | --line-separator)
		LINE_SEPARATOR=1
		;;
    -ns|--no-summary) 
        NO_SUMMARY=1
        ;;
    -V | --version) echo "`basename $0` ${VERSION} ${VERSION_DATE}"; exit 0 ;;  
    * )        
        PROJECT_DIR=$1;
        ;; 
  esac
  shift
done

if [ -z "$PROJECT_DIR" ] || [ ! -d "$PROJECT_DIR" ]; then
        PROJECT_DIR="./"
fi

if [ ! -d "$PROJECT_DIR" ] 
then
  echo "directory $PROJECT_DIR does not exist";
  exit 1
fi

CWD=`pwd`
cd $PROJECT_DIR
PROJECT_DIR=`pwd`

find "$PROJECT_DIR"  -type d -name ".git*"  |  sed 's/\/.git//g' | sort | while read ENTRY
do
        cd $ENTRY 
        if [ ! -z "$LINE_SEPARATOR" ]; then 
             echo "\033[44m $(tput el) $(tput sgr0)"
        fi
        #URLS=`git config --get remote.origin.url`
        URLS=`git remote -v | awk '{print $1 " " $2 }' | sort -u`  
        PROJECT20=`basename $ENTRY`
        PROJECT20=`printf '\e[1m%-22.22s\e[21m' $PROJECT20`
        echo "\033[32m$PROJECT20\033[0m $URLS"
        cd $PROJECT_DIR
done

if [ -z "$NO_SUMMARY" ]; then
        if [ ! -z "$LINE_SEPARATOR" ]; then 
             echo "\033[44m $(tput el) $(tput sgr0)"
        fi
        TIME=`date +%H:%M:%S`
        ELAPSED_TIME=$((`date +'%s'` - $START_TIME))
        echo "$BASENAME finished:$TIME took:$(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) s"
fi


