#!/bin/sh
#git recursive directories scripts - http://safrm.net/projects/gr-scripts
#author: Miroslav Safr <miroslav.safr@gmail.com>
#
VERSION=NA
VERSION_DATE=NA
#support color escape characters on different terminals
alias echo="/bin/echo -e"

BASENAME=`basename $0`
START_TIME=`date +'%s'`
usage() {
    echo "$BASENAME ${VERSION}"
    echo "cleans up git clones in all subdirectories ./ or $1/ except those which are marked by:"
    echo "  touch <dir>/.git/no_updates"
    echo "Usage:$BASENAME [OPTIONS] ... [PROJECT_DIR]"
    echo " options: "
    echo " -h, --help .......................... shows command line help"
    echo " -ss, --show-size .................... show size of repo before and after cleaning"
    echo " -p, --prune ......................... use --prune flag for git gc"
    echo " -a, --aggressive .................... use --aggressive flag for git gc"
    echo " -v, --verbose ....................... use more verbose output"
    echo " -n, --dry-run ....................... show cleaned files and do not any changes"
    echo " -ls, --line-separator ............... project separated by colored line"
    echo " -ns, --no-summary ................... do not print execution summary"
    echo " -ld, --limit-depth <N> .............. limit recursion depth for directory structure search"
    echo " -V, --version  ...................... prints version of scripts"
    echo " "
}

while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help) usage ; exit ;;
    -V|--version) echo "`basename $0` ${VERSION} ${VERSION_DATE}" ; exit 0 ;;  
    -ls|--line-separator) LINE_SEPARATOR=1 ;;
    -ns|--no-summary)     NO_SUMMARY=1 ;;
    -n|--dry-run)         DRY_RUN=1 ;;
    -ss|--show-size)      SHOW_SIZE=1 ;;
    -p|--prune)           PRUNE_FLAG=" --prune" ;;
    -a|--aggressive)      AGGRESSIVE_FLAG=" --aggressive" ;;
    -v|--verbose)         VERBOSE_FLAG=" --verbose" ;;
    -ld|--limit-depth) shift ; LIMIT_DEPTH="-maxdepth $1" ;;
    *)                    PROJECT_DIR="$1" ;;
  esac
  shift
done

if [ -z "$PROJECT_DIR" ]; then
    PROJECT_DIR="./"
fi

if [ ! -d "$PROJECT_DIR" ]; then
    echo "directory $PROJECT_DIR does not exist" ; exit 1
fi

CWD=`pwd`
cd "$PROJECT_DIR"
PROJECT_DIR=`pwd`

find "$PROJECT_DIR" $LIMIT_DEPTH -type d -name ".git*"  | sed 's/\/.git//g' | sort | while read ENTRY
do
    if [ -d "$ENTRY" ] && [ -d "$ENTRY"/.git ]; then
        if [ ! -f "$ENTRY/.git/no_updates" ]; then
            cd "$ENTRY"
            if [ -n "$LINE_SEPARATOR" ]; then
                echo "\033[44m $(tput el) $(tput sgr0)"
            fi
            PROJECT20=`basename $ENTRY`
            PROJECT20=`printf '%-20s' $PROJECT20`
            echo "\033[32m $ENTRY\033[0m cleaning.."
            BRANCH=`git branch | egrep "^\*" | cut -d' ' -f2`
            if [ -n "$SHOW_SIZE" ];  then
                git count-objects $VERBOSE_FLAG
            fi
            if [ -n "$DRY_RUN" ];  then
                git prune -n $VERBOSE_FLAG
            else
                # check that branch is remote
                if git branch -a | grep -q -i "remotes/origin/$BRANCH" ; then
                    REMOTE="origin/"
                fi
                git reset --hard $REMOTE$BRANCH
                git gc --quiet $PRUNE_FLAG $AGGRESSIVE_FLAG
                git clean -dfx
                if [ -n "$SHOW_SIZE" ];  then
                    git count-objects
                fi
            fi
            cd "$PROJECT_DIR"
        else
            echo "\033[32m $ENTRY\033[0m \033[35m skipped clean \033[0m" 
        fi
    fi
done

if [ -z "$NO_SUMMARY" ]; then
    if [ -n "$LINE_SEPARATOR" ]; then
         echo "\033[44m $(tput el) $(tput sgr0)"
    fi
    TIME=`date +%H:%M:%S`
    ELAPSED_TIME=$((`date +'%s'` - $START_TIME))
    echo "$BASENAME finished:$TIME took:$(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) s"
fi

