#!/bin/sh
#git recursive directories scripts - http://safrm.net/projects/gr-scripts
#author: Miroslav Safr <miroslav.safr@gmail.com>
#
VERSION=NA
    VERSION_DATE=NA
#support color escape characters on different terminals
alias echo="$(which echo) -e"

BASENAME=`basename $0`
START_TIME=`date +'%s'`
usage() {
    echo "$BASENAME ${VERSION}"
    echo "Pulls all and resets local changes in subdirectories ./ or PROJECT_DIR/"
    echo "Usage:$BASENAME [OPTIONS]... [PROJECT_DIR]"
    echo " options: "
    echo " -h, --help .......................... shows command line help"
    echo " -ld, --limit-depth <N> .............. limit recursion depth for directory structure"
    echo " -ls, --line-separator ............... project separated by colored line"
    echo " -ns, --no-summary ................... do not print execution summary"
    echo " -ld, --limit-depth <N> .............. limit recursion depth for directory structure search"
    echo " -a, --all ........................... update all remotes (by default only origin)"
    echo " -V, --version  ...................... prints version of scripts"
    echo "Note: touch <dir>/.git/skip skips selected repo"
    echo " "
}
FETCH_REMOTE=origin
while [ $# -gt 0 ]; do
  case "$1" in
    -V|--version)         echo "`basename $0` ${VERSION} ${VERSION_DATE}" ; exit 0 ;;
    -h|--help)            usage ; exit 0 ;;
    -ld|--limit-depth)    shift ; LIMIT_DEPTH="-maxdepth $1" ;;
    -ls|--line-separator) LINE_SEPARATOR=1 ;;
    -ns|--no-summary)     NO_SUMMARY=1 ;;
    -b|--branch)          USER_BRANCH=$1 ;;
    -ld|--limit-depth)    shift ; LIMIT_DEPTH="-maxdepth $1" ;;
    -a|--all)             FETCH_REMOTE=--all ;;
    *)                    PROJECT_DIR="$1" ;;
  esac
  shift
done
if [ -z "$PROJECT_DIR" ]; then
    PROJECT_DIR="./"
fi

if [ ! -d "$PROJECT_DIR" ]; then
  echo "directory $PROJECT_DIR does not exist" ; exit 1
fi

CWD=`pwd`
cd "$PROJECT_DIR"
PROJECT_DIR=`pwd`

find "$PROJECT_DIR" $LIMIT_DEPTH -type d -name ".git*"  |  sed 's/\/.git//g' | sort | while read ENTRY
do
    PROJECT20=`basename $ENTRY`
    PROJECT20=`printf '\e[1m%-22.22s\e[21m' $PROJECT20`
    if [ ! -f "$ENTRY/.git/skip" ]; then
        cd "$ENTRY"
        if [ ! -z "$LINE_SEPARATOR" ]; then
            echo "\033[44m $(tput el) $(tput sgr0)"
        fi
        LASTTAG=`git describe --tags --dirty=* --always 2> /dev/null`
        BRANCH=`git branch | egrep "^\*" | cut -d' ' -f2`
        BRANCH20=`printf '%-22.22s' [$BRANCH]`
        echo "\033[32m$PROJECT20\033[0m \033[31m$BRANCH20\033[0m from: \033[01;34m $LASTTAG \033[0m \c"
        [ -n "$USER_BRANCH" -a "$USER_BRANCH" != "$BRANCH" ] && BRANCH=$USER_BRANCH && echo "Switching to user defined branch: $BRANCH"

        git fetch $FETCH_REMOTE 2> /dev/null
        if [ $? = 128 ] ; then
            echo "remote \033[41mNOT CONNECTED\033[0m "
        else
            echo
            git fetch $FETCH_REMOTE --tags
            # check that branch is remote
            if git branch -a | grep -q -i "remotes/origin/$BRANCH" ; then
                 REMOTE="origin/"
            fi
            git reset --hard $REMOTE$BRANCH
            git gc --quiet
            git pull -q
            if [ $? != 0 ]; then
                 echo "\033[41mPULL FAILED, FIX CONFLICT MANUALLY\033[0m"
            fi
        fi

        TO=`git describe --tags --dirty=* --always 2> /dev/null`
        if [ "$LASTTAG" != "$TO" ]; then
            echo " \033[33mupdated to:\033[0m \033[01;34m $TO \033[0m  "
            LASTMSG=`git log -1 --pretty=tformat:'%h %s | %ad' --date=relative`
            echo " \033[33m$LASTMSG\033[0m"
        fi
            cd "$PROJECT_DIR"
            echo
        else
            echo "\033[32m$PROJECT20\033[0m \033[35m skipped update \033[0m"
        fi
done

if [ -z "$NO_SUMMARY" ]; then
    if [ -n "$LINE_SEPARATOR" ]; then
        echo "\033[44m $(tput el) $(tput sgr0)"
    fi
    TIME=`date +%H:%M:%S`
    ELAPSED_TIME=$((`date +'%s'` - $START_TIME))
    echo "$BASENAME (reset local)  finished:$TIME took:$(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) s"
fi

