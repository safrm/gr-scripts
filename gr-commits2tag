#!/bin/sh
#git recursive directories scripts - http://safrm.net/projects/gr-scripts
#author: Miroslav Safr <miroslav.safr@gmail.com>
#shows untagged commits on head/local/remote 
# -v shows the details
VERSION=NA                                                                   
VERSION_DATE=NA
BASENAME=`basename $0`
START_TIME=`date +'%s'`

while [ $# -gt 0 ]; do
  case "$1" in
    -v|--verbose) 
               VERBOSE=1
               ;;
	* )    PROJECT_DIR=$1;
	       ;; 
  esac
  shift
done

if [ -z "$PROJECT_DIR" ]
then
	PROJECT_DIR="./"
fi

if [ ! -d "$PROJECT_DIR" ] 
then
  echo "directory $PROJECT_DIR does not exist";
  exit 1
fi

CWD=`pwd`
cd $PROJECT_DIR
PROJECT_DIR=`pwd`

find "$PROJECT_DIR"  -type d -name ".git*"  |  sed 's/\/.git//g' | sort | while read ENTRY
do
	if [ ! -f $ENTRY/.git/no_updates ]; then
		cd $ENTRY 
        git fetch origin 2> /dev/null
        if [ $? = 128 ] ; then
            NC="\033[41mNOT CONNECTED\033[0m "
        else
            NC=
    		git fetch origin --tags
        fi
		BRANCH=`git branch | egrep "^\*" | cut -d' ' -f2`
        LASTTAG_NAME=`git describe --tags --abbrev=0 2> /dev/null`
        PROJECT20=`basename $ENTRY`
        PROJECT20=`printf '%-20s' $PROJECT20` 
        echo "\033[32m$PROJECT20\033[0m \033[31m [$BRANCH]\033[0m \033[33m`git tag -l -n1 $LASTTAG_NAME`\033[0m"

        HEAD=`git describe --tags --dirty=* --always 2> /dev/null`
        MASTER_LOCAL=`git describe --tags master --always 2> /dev/null`
        MASTER_REMOTE=`git describe --tags origin/master --always 2> /dev/null`
        LOCAL_COMMITS_FROM_LASTTAG_LOCAL=`git log --pretty=tformat:' %Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' $LASTTAG_NAME..master`
        LCFT_COUNT=`echo "$LOCAL_COMMITS_FROM_LASTTAG_LOCAL" | grep -v '^$'  | wc -l`
        LOCAL_COMMITS_HEAD=`git log --pretty=tformat:' %Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' master..HEAD `
        LCH_COUNT=`echo "$LOCAL_COMMITS_HEAD" | grep -v '^$' |wc -l`
        REMOTE_COMMITS_FROM_LASTTAG_LOCAL=`git log --pretty=tformat:' %Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' $LASTTAG_NAME..origin/$BRANCH `
        RCFT_COUNT=`echo "$REMOTE_COMMITS_FROM_LASTTAG_LOCAL"| grep -v '^$' | wc -l`

        echo "\033[46mhead  :\033[0m \033[34m $HEAD \033[0m \033[42m$LCH_COUNT\033[0m"
        if [ ! -z "$LOCAL_COMMITS_HEAD" ]; then echo "$LOCAL_COMMITS_HEAD"; fi
        echo "\033[46mlocal :\033[0m \033[34m $MASTER_LOCAL \033[0m \033[42m$LCFT_COUNT\033[0m"
        if [ ! -z "$LOCAL_COMMITS_FROM_LASTTAG_LOCAL" ]; then echo "$LOCAL_COMMITS_FROM_LASTTAG_LOCAL"; fi
        echo "\033[46mremote:\033[0m \033[34m $MASTER_REMOTE \033[0m \033[42m$RCFT_COUNT\033[0m $NC"
        if [ ! -z "$REMOTE_COMMITS_FROM_LASTTAG_LOCAL" ]; then echo "$REMOTE_COMMITS_FROM_LASTTAG_LOCAL"; fi

        #local changes
    	LOCAL_CHANGES=`git status -s`
    	LOCAL_CHANGES_COUNT=`echo "$LOCAL_CHANGES" | grep -v '^$'| wc -l`
        #remote & local repo
        COMMITCOUNT_PULL=0
        COMMITCOUNT_PUSH=0
		if [ "$HEAD" != "$MASTER_REMOTE" ]; then
            COMMITCOUNT_PULL=`git shortlog origin/$BRANCH..$BRANCH | grep -E '^[ ]+\w+' | wc -l`
			COMMITCOUNT_PUSH=`git shortlog $BRANCH..HEAD | grep -E '^[ ]+\w+' | wc -l`
		fi

        if [ "x$LOCAL_CHANGES_COUNT" != "x0" ] || [ "x$COMMITCOUNT_PULL" != "x0" ] || [ "x$COMMITCOUNT_PUSH" != "x0" ] 
        then
            echo "\033[43m NEEDS UPDATE OR COMMIT (pull:$COMMITCOUNT_PULL/push:$COMMITCOUNT_PUSH/local-files:$LOCAL_CHANGES_COUNT)\033[0m"    
        fi
        if [ ! -z "$VERBOSE" ]; then
            echo "$LOCAL_CHANGES"
    	fi

		cd $PROJECT_DIR
	fi
done

TIME=`date +%H:%M:%S`
ELAPSED_TIME=$((`date +'%s'` - $START_TIME))
echo "$BASENAME found \033[42m$FOUND_COUNT\033[0m finished:$TIME took:$(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) s"


